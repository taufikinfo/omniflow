<?php
/*
 * Copyright (c) 2015, Omni-Workflow - Omnibuilder.com by OmniSphere Information Systems. All rights reserved. For licensing, see LICENSE.md or http://workflow.omnibuilder.com/license
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace OmniFlow;
/**
 * Description of SVGHandler
 *
 * @author ralph
 */
class SVGHandler {
	
    static function displayDiagram(\OmniFlow\BPMN\Process $proc, $decorations) {
        $debug = true;
        $path  = $proc->getImageFileName();
        if (!file_exists($path)) {
            OmniFlow\Context::Error("No SVG file found for this process. You need to save the model to generate an SVG file.");
            return null;
        }
        $entries   = file_get_contents($path);
        $generator = "";
        if (strpos($entries, 'Generated by the Batik Graphics2D SVG Generator') !== false) { // eclipse style
            $generator = "eclipse";
        } elseif (strpos($entries, 'created with bpmn-js') !== false) { // bpmn-js style
            $generator = "bpmn.js";
        }
        $svg        = new \SimpleXmlElement($entries);
        $namespaces = $svg->getDocNamespaces();
        $svg->registerXPathNamespace('__nons', $namespaces['']);
        if ($generator == 'eclipse') {
            Context::Log(INFO, "eclipse diagram");
            $root = $svg->xpath("//__nons:svg");
            if (count($root) > 0)
                $root = $root[0];
            $ht = XMLLoader::getAttribute($root, 'height');
            $wd = XMLLoader::getAttribute($root, 'width');
            if ($ht == null)
                $root->addAttribute('height', '800px');
            if ($wd == null)
                $root->addAttribute('width', '100%');
            $txts  = $svg->xpath("//__nons:text");
            $g     = $svg->xpath("//__nons:rect");
            $rects = array();
            foreach ($g as $rect) {
                $gx      = XMLLoader::getAttribute($rect, 'x');
                $gy      = XMLLoader::getAttribute($rect, 'y');
                $gw      = XMLLoader::getAttribute($rect, 'width');
                $gh      = XMLLoader::getAttribute($rect, 'height');
                $rects[] = array(
                    $rect,
                    $gx,
                    $gy,
                    $gw,
                    $gh,
                    null
                );
                //               Context::Log(INFO, "eclipse diagram $gx $gy $gw $gh");
            }
            foreach ($proc->items as $procItem) {
                $x  = $procItem->xCoord;
                $y  = $procItem->yCoord;
                $id = $procItem->id;
                //               Context::Log(INFO, "eclipse diagram $id - $x $y");
                foreach ($rects as $rect) {
                    $x1 = $rect[1] - 5;
                    $x2 = $rect[1] + 5;
                    $y1 = $rect[2] - 5;
                    $y2 = $rect[2] + 5;
                    if (($x > $x1) && ($x < $x2) && ($y > $y1) && ($y < $y2)) {
                        if ($rect[5] == null) {
                            //                    Context::Log(INFO, "  found it eclipse diagram $id - $x $y".var_export($rect,true));
                            $rect[0]->addAttribute("onclick", "top.processItemClicked(evt,'$id')");
                            $rect[5] = $id;
                        }
                    }
                }
            }
            foreach ($rects as $rect) {
                if ($rect[5] == null)
                    continue;
                $id = $rect[5];
                $x1 = $rect[1];
                $x2 = $rect[1] + $rect[3];
                $y1 = $rect[2];
                $y2 = $rect[2] + $rect[4];
                foreach ($txts as $txt) {
                    $gx = XMLLoader::getAttribute($txt, 'x');
                    $gy = XMLLoader::getAttribute($txt, 'y');
                    //                                    var_dump($txt);
                    if (($gx > $x1 && $gx < $x2) && ($gy > $y1 && gy < $y2)) {
                        echo '---';
                        $txt->addAttribute("onclick", "top.processItemClicked(evt,'$id')");
                    }
                }
            }
            //
        }
        if ($generator == 'bpmn.js') {
			$o =0;	
            foreach ($proc->items as $procItem) {
                $id = $procItem->id;
				$processId = $procItem->processId;
                $g  = $svg->xpath("//__nons:g[@data-element-id='$id']");
				
                if (count($g) == 1) {
                    $g = $g[0];
                    $g->addAttribute("onclick", "top.processItemClicked(evt,'$id','$processId','$o')");
                    $g->addAttribute("onmouseover", "top.processItemOver(evt,'$id')");
                    $g->addAttribute("onmouseout", "top.processItemOut(evt,'$id')");
                    $rect = $g->rect;
                    $attr = $rect->attributes();
                    $ht   = intval($attr['height']);
                    if ($ht < 20)
                        $rect->attributes()->height = 20;
                    $wd = intval($attr['width']);
                    if ($wd < 20)
                        $rect->attributes()->width = 20;
                }
				$o++;
            }
        }
        /*
        $images = $svg->xpath('//__nons:circle');
        if (count($images)>0)
        {
        
        $firstImage=$images[2];
        
        $parent = $firstImage->xpath("parent::*");
        $parent=$parent[0];
        //
        
        $text="";
        $lastImage=null;
        $images=Array();
        
        foreach($parent->xpath("child::*") as $child) {
        //	foreach($parent->xpath("child::node()") as $child) {
        
        //
        // we are looking for an image followed by 1 or more texts
        //
        //		echo '<br />'.$child->getName();
        $name=$child->getName();
        
        if (($name=="text")  && $lastImage!=null)
        {
        if ($text!="")
        $text.=" ";
        $text.=$child->__ToString();
        //				echo ' found text';
        }
        elseif ($lastImage!=null && $text!="")
        {
        $attr=$lastImage->attributes();
        $ht=$attr['height'];
        $wd=$attr['width'];
        $x=$attr['x'];
        $y=$attr['y'];
        
        $images[]=array($text,$ht,$wd,$x,$y);
        
        //				echo '----- Text for Image'.$text. $ht.$wd.$x.$y;
        $lastImage=null;
        }
        if($name=="image")
        {
        $lastImage=$child;
        $text="";
        //				echo ' found image';
        }
        }
        // 			foreach($images as $image)
        {
        //		echo '<br />image name:'.$image[0]; */
	
        foreach ($decorations as $decore) {
            //			echo ' decore:'.$decore[0];
            //					if ($decore[0]==$image[0])
            $item = $decore[0];
            $id   = $item->id;
            $g    = $svg->xpath("//__nons:g[@data-element-id='$id']");
            if (count($g) == 1) {
                $g     = $g[0];
                $x     = $item->xCoord;
                $y     = $item->yCoord;
                $color = $decore[2];
                //				echo '<br />adding decoration for'.$image[0];
                $rec= $g->addChild('circle');                
                // <rect id="Ralph" stroke="red" width="120" height="60" x="341" y="94" rx="10" ry="10"
                // style="stroke-width: 4; fill: none;"/> 
                $rec->addAttribute('stroke', '7d7d7d');
				$rec->addAttribute('fill', '#FFD96578');
                $rec->addAttribute('r', "10");
                $rec->addAttribute('cx',30);
                $rec->addAttribute('cy',0);
                $rec->addAttribute('style', 'stroke-width: 2;fill: #FFD96578;'); 
                $txt   = $g->addChild('text');
                $txt->addAttribute('class', ' djs-label');
                $txt->addAttribute('stroke', $color);
                $ts = $txt->addChild('tspan', $decore[1]);
                $ts->addAttribute('x', 27);
                $ts->addAttribute('y', 4);
                
                // <text class=" djs-label" style="font-family: Arial, sans-serif; font-size: 11px;">
                // <tspan x="4.5" y="12">Hungry for pizza
                // </tspan>
                // </text> 
            }
        }
        //            echo "<div style='overflow-y: scroll;height:400px'>";
        return $svg->asXML();
        //           echo '</div>';
    }
}
 
